# Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

from cpython.object cimport PyObject
from libc.stdint cimport uintptr_t

cdef extern from "core.h":

    cdef struct Rc_String:
        pass

    cdef struct Symbol_t:
        Rc_String *value;

    # CVec is a C compatible struct that stores an opaque pointer to a block of
    # memory, it's length and the capacity of the vector it was allocated from.
    #
    # NOTE: Changing the values here may lead to undefined behaviour when the
    # memory is dropped.
    cdef struct CVec:
        # Opaque pointer to block of memory storing elements to access the
        # elements cast it to the underlying type.
        void *ptr;
        # The number of elements in the block.
        uintptr_t len;
        # The capacity of vector from which it was allocated.
        # Used when deallocating the memory
        uintptr_t cap;

    # Returns a Nautilus identifier from a valid Python object pointer.
    #
    # # Safety
    # - Assumes `ptr` is borrowed from a valid Python UTF-8 `str`.
    Symbol_t symbol_new(PyObject *ptr);

    Symbol_t symbol_copy(const Symbol_t *symbol);

    # Frees the memory for the given `symbol` by dropping.
    void symbol_free(Symbol_t symbol);

    void symbol_vec_test(void *data, uintptr_t len);

    CVec cvec_new();

    # # Safety
    # - Assumes `chunk` is a valid `ptr` pointer to a contiguous byte array
    # Default drop assumes the chunk is byte buffer that came from a Vec<u8>
    void cvec_free(CVec cvec);
