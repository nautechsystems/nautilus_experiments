# Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

from cpython.object cimport PyObject
from libc.stdint cimport uintptr_t, uint8_t, uint64_t

cdef extern from "core.h":

    cdef struct Rc_String:
        pass

    cdef struct UUID4_t:
        Rc_String *value;

    cdef struct CVec:
        void *ptr;
        uintptr_t len;
        uintptr_t cap;

    UUID4_t uuid4_new();

    UUID4_t uuid4_clone(const UUID4_t *uuid4);

    void uuid4_free(UUID4_t uuid4);

    # Returns a `UUID4` from a valid Python object pointer.
    #
    # # Safety
    # - Assumes `ptr` is borrowed from a valid Python UTF-8 `str`.
    UUID4_t uuid4_from_pystr(PyObject *ptr);

    # Returns a pointer to a valid Python UTF-8 string.
    #
    # # Safety
    # - Assumes that since the data is originating from Rust, the GIL does not need
    # to be acquired.
    # - Assumes you are immediately returning this pointer to Python.
    PyObject *uuid4_to_pystr(const UUID4_t *uuid);

    uint8_t uuid4_eq(const UUID4_t *lhs, const UUID4_t *rhs);

    uint64_t uuid4_hash(const UUID4_t *uuid);

    CVec cvec_new();

    # Specialize to UUID4 for test
    void cvec_free(CVec cvec);
